import shap
from sklearn.model_selection import train_test_split
from sklearn import datasets, svm
import numpy as np
import matplotlib.pyplot as plt
from math import sqrt

from shapleycomposition import ShapleyExplainer
from composition_stats import ilr


K = 1

X, Y = datasets.load_iris(return_X_y=True)

X_train,X_test,Y_train,Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)

def print_accuracy(f):
    print("Accuracy = {0}%".format(100*np.sum(f(X_test) == Y_test)/len(Y_test)))

svc_linear = svm.SVC(kernel='rbf', probability=True)
svc_linear.fit(X_train, Y_train)
print_accuracy(svc_linear.predict)

# explain all the predictions in the test set
explainer = ShapleyExplainer(svc_linear.predict_proba, X_train, 3)
explainer1 = ShapleyExplainer(svc_linear.predict_proba, X_train, 3, sbpmatrix=np.array([[1,1,-1],[1,-1,0]]))

(shap, base) = explainer.explain_instance(np.array(X_test[K]))

pred = svc_linear.predict_proba(X_test[K].reshape(1,-1))
print("sample and label")
print(X_test[K])
total = np.array(shap).sum(axis=0)+base

print("ALGO")
print("base")
print(base)
print("shap")
print(shap)
print("total")
print(total)
print("pred")
print(pred)
print(ilr(pred))
print("           ")

pred = ilr(pred)

origin = np.array([[0,0, 0, 0],[0,0, 0, 0]])
x1, y1 = [0,0], [0,10]
x2, y2 = [0,10], [0,-10/sqrt(3)]
x3, y3 = [0,-10], [0,-10/sqrt(3)]

plt.figure(figsize=(7,7))
plt.plot(x1,y1,'b--',x2,y2,'b--',x3,y3,'b--')
plt.text(1,1/sqrt(3),'setosa', ha='center', va='center')
plt.text(-1,1/sqrt(3),'versicolor', ha='center', va='center')
plt.text(0,-2,'virginica', ha='center', va='center')

for i,p in enumerate(shap):
    plt.plot([0,p[0]],[0,p[1]])
    plt.text(p[0],p[1], str(i+1))
plt.xlim((-4,4))
plt.ylim((-4,4))
plt.xlabel("First ILR component")
plt.ylabel("SecondILR component")
plt.show()

plt.figure(figsize=(7,7))
plt.plot(x1,y1,'b--',x2,y2,'b--',x3,y3,'b--')
plt.text(1,1/sqrt(3),'setosa', ha='center', va='center')
plt.text(-1,1/sqrt(3),'versicolor', ha='center', va='center')
plt.text(0,-2,'virginica', ha='center', va='center')

plt.scatter(base[0],base[1],marker="+",c='black',s=50)
plt.scatter(pred[0],pred[1],marker="x",c='black',s=50)

s = base
lbl="1"
for i,p in enumerate(shap):
    plt.plot([s[0],(s+p)[0]],[s[1],(s+p)[1]])
    plt.text((s+p)[0],(s+p)[1],lbl)
    lbl += ","+str(i+2)
    s += p

print(s)
print(pred)
plt.xlim((-4,4))
plt.ylim((-4,4))
plt.xlabel("First ILR component")
plt.ylabel("SecondILR component")
plt.show()

print(Y_test[K])
